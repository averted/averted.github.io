{"version":3,"sources":["context/context.ts","context/Provider.tsx","styles/config.ts","styles/root.js","components/TextInput/index.tsx","views/App/ResultItem/helpers.ts","views/App/ResultItem/index.tsx","context/useData.ts","views/App/index.tsx","client.tsx","index.tsx"],"names":["context","createContext","data","setData","Provider","Consumer","value","children","size","createGlobalStyle","sc","onChange","className","Container","styled","input","getQuestQuant","item","quests","length","reduce","acc","quest","quantity","getHideoutQuant","hideout","useContext","add","key","updated","localStorage","setItem","JSON","stringify","update","useData","onAdd","id","name","shortName","Actions","DoneInput","String","ev","val","target","Number","Total","type","onClick","div","props","TextInput","App","useState","search","setSearch","results","setResults","filtered","items","filter","compare","Results","map","ResultItem","str1","str2","toLowerCase","includes","ul","storage","parse","getItem","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.68048e08.chunk.js","sourcesContent":["import { Context, createContext } from 'react'\n\nconst context: Context<any> = createContext({\n  data: {},\n  setData: () => {}\n})\n\nconst { Provider, Consumer } = context\n\nexport { context, Provider, Consumer }\n","import React, { Dispatch, SetStateAction, ReactNode } from 'react'\nimport { StorageData } from 'src/types'\nimport { Provider } from './context'\n\ntype DataContext = {\n  data: StorageData,\n  setData: Dispatch<SetStateAction<StorageData>>\n}\n\ntype Props = {\n  value: DataContext\n  children: ReactNode\n}\n\nexport default ({ value, children }: Props): JSX.Element => (\n  <Provider value={value}>{children}</Provider>\n)\n","const BASE = 8\n\nexport default {\n  primary: '#eae0d5',\n  secondary: '#c6ac8f',\n  tertiary: '#',\n\n  // colors\n  background: '#22333b',\n  quest: '#ff3333',\n  hideout: '#a6a6a6',\n\n  fontColor: '#eae0d5',\n  fontFamily: \"'Inconsolata', monospace\",\n  fontContrast: '#000',\n\n  // fonts\n  fontSizeSmallest: '12px',\n  fontSizeSmaller: '16px',\n  fontSizeSmall: '20px',\n  fontSize: '24px',\n  fontSizeLarge: '28px',\n  fontSizeLarger: '32px',\n  fontSizeLargest: '36px',\n\n  // spacing\n  spacing: (size: number) => `${BASE*size}px`,\n}\n","import { createGlobalStyle } from 'styled-components'\nimport { sc } from '.'\n\nexport default createGlobalStyle`\n  html, body, input, textarea, select, button {\n    color: ${sc.fontColor};\n    font-size: ${sc.fontSize};\n    font-weight: 500;\n    font-family: ${sc.fontFamily};\n    text-rendering: optimizeLegibility;\n\n    -webkit-font-smoothing: antialiased;\n  }\n\n  body * {\n    box-sizing: border-box;\n    -webkit-tap-highlight-color: rgba(0,0,0,0);\n  }\n\n  html, body {\n    -webkit-font-smoothing: antialiased;\n    -webkit-text-size-adjust: none;\n    -webkit-touch-callout: none;\n    -ms-user-select: none;\n    min-height: 100vh;\n\n    color: ${sc.fontColor};\n    background-color: ${sc.background};\n\n    width: 100%;\n    padding: 0;\n    margin: 0;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    margin: 0;\n    padding: 0;\n    font-weight: 300;\n  }\n\n  :focus {\n    outline-width: 0;\n  }\n\n  a {\n    cursor: pointer;\n    text-decoration: none;\n  }\n\n  ul {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n\n  b, strong {\n    font-weight: 400;\n  }\n`\n","import React, { ChangeEvent } from 'react'\nimport styled from 'styled-components'\nimport { sc } from 'src/styles'\n\ntype Props = {\n  value: string\n  onChange: (ev: ChangeEvent<HTMLInputElement>) => void\n  className?: string\n}\n\nexport default ({ value, onChange, className }: Props) => {\n  return (\n    <Container\n      value={value}\n      onChange={onChange}\n      className={className}\n    />\n  )\n}\n\nconst Container = styled.input`\n  width: 100%;\n  padding: ${sc.spacing(1)};\n  background-color: #000;\n  border: 1px solid ${sc.secondary};\n  transition: all 100ms linear;\n\n  &:focus {\n    border-color: ${sc.primary};\n  }\n`\n","import { DataItem } from 'src/types'\n\nexport const getQuestQuant = (item: DataItem): number => {\n  if (!item.quests?.length) {\n    return 0\n  }\n\n  return item.quests.reduce((acc, quest) => acc += quest.quantity, 0)\n}\n\nexport const getHideoutQuant = (item: DataItem): number => {\n  if (!item.hideout?.length) {\n    return 0\n  }\n\n  return item.hideout.reduce((acc, hideout) => acc += hideout.quantity, 0)\n}\n","import React, { ChangeEvent } from 'react'\nimport styled from 'styled-components'\nimport { TextInput } from 'src/components'\nimport { useData } from 'src/context'\nimport { sc } from 'src/styles'\nimport { DataItem } from 'src/types'\n\nimport { getQuestQuant, getHideoutQuant } from './helpers'\n\ntype Props = {\n  item: DataItem\n}\n\nexport default ({ item }: Props) => {\n  const { data, add, update } = useData()\n\n  const onAdd = () => add(item.id)\n\n  const onChange = (ev: ChangeEvent<HTMLInputElement>) => {\n    const val = ev.target.value\n\n    if (!val) {\n      update(item.id, 0)\n    } else {\n      update(item.id, Number(val))\n    }\n  }\n\n  return (\n    <>\n      <span>{item.name} ({item.shortName})</span>\n      <Actions>\n        <DoneInput\n          value={String(data[item.id] || 0)}\n          onChange={onChange}\n        />\n\n        <Total type=\"quest\" onClick={onAdd}>\n          {getQuestQuant(item)}\n        </Total>\n\n        <Total type=\"hideout\" onClick={onAdd}>\n          {getHideoutQuant(item)}\n        </Total>\n      </Actions>\n    </>\n  )\n}\n\nconst Actions = styled.div`\n  display: flex;\n  gap: ${sc.spacing(1)};\n`\n\nconst Total = styled.div<{\n  type: 'quest' | 'hideout'\n}>`\n  width: ${sc.spacing(6)};\n  height: ${sc.spacing(6)};\n  line-height: ${sc.spacing(5.5)};\n  color: ${sc.fontContrast};\n  font-weight: 600;\n  border-radius: 3px;\n  background-color: ${props => props.type === 'quest' ? sc.quest : sc.hideout};\n  text-align: center;\n  user-select: none;\n  cursor: pointer;\n`\n\nconst DoneInput = styled(TextInput)`\n  width: ${sc.spacing(6)};\n  border-radius: 4px;\n  text-align: center;\n`\n","import { useContext } from 'react'\nimport { context } from './context'\n\nexport default () => {\n  const { data, setData } = useContext(context)\n\n  return {\n    data,\n    add: (key: string) => {\n      const updated = { ...data }\n\n      if (!updated[key]) {\n        updated[key] = 0\n      }\n\n      updated[key] += 1\n      setData(updated)\n      // TODO: constants\n      localStorage.setItem('tarkov-tracker-data', JSON.stringify(updated))\n    },\n    update: (key: string, value: number) => {\n      const updated = { ...data }\n      updated[key] = value\n      setData(updated)\n      // TODO: constants\n      localStorage.setItem('tarkov-tracker-data', JSON.stringify(updated))\n    }\n  }\n}\n","import React, { ChangeEvent, useState } from 'react'\nimport styled from 'styled-components'\nimport { sc } from 'src/styles'\nimport { TextInput } from 'src/components'\nimport { DataItem } from 'src/types'\nimport items from 'src/data.json'\n\nimport ResultItem from './ResultItem'\n\nconst App = () => {\n  const [search, setSearch] = useState('')\n  const [results, setResults] = useState<DataItem[]>([])\n\n  const onSearch = (ev: ChangeEvent<HTMLInputElement>) => {\n    const val = ev.target.value\n    setSearch(val)\n\n    if (!val) {\n      setResults([])\n    } else {\n      const filtered: DataItem[] = (items as DataItem[]).filter(\n        item => compare(item.shortName, val) || compare(item.name, val)\n      )\n      setResults(filtered)\n    }\n  }\n\n  return (\n    <Container>\n      <TextInput\n        value={search}\n        onChange={onSearch}\n      />\n\n      { results.length ? (\n        <Results>\n          { results.map((item: DataItem) => (\n            <li key={item.id}>\n              <ResultItem item={item} />\n            </li>\n          )) }\n        </Results>\n      ) : null }\n    </Container>\n  )\n}\n\nexport default App\n\nconst compare = (str1: string, str2: string): boolean => {\n  return str1.toLowerCase().includes(str2.toLowerCase())\n}\n\nconst Container = styled.div`\n  padding: ${sc.spacing(3)};\n`\n\nconst Results = styled.ul`\n  margin-top: ${sc.spacing(2)};\n  border: 1px solid ${sc.secondary};\n\n  & > li {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: ${sc.spacing(1)};\n    padding-left: ${sc.spacing(2)};\n  }\n`\n","import React, { useState } from 'react'\nimport { DataProvider } from './context'\nimport { StorageData } from './types'\nimport App from './views/App'\n\n// TODO: constants\nconst storage: StorageData = JSON.parse(localStorage.getItem('tarkov-tracker-data') || '{}')\n\nexport default () => {\n  const [data, setData] = useState(storage)\n\n  return (\n    <DataProvider value={{ data, setData }}>\n      <App />\n    </DataProvider>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Client from './client'\nimport { GlobalStyle } from './styles'\n\nimport 'normalize.css/normalize.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <Client />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}