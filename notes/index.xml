<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Intro on Notes</title>
    <link>https://averted.github.io/notes/</link>
    <description>Recent content in Intro on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://averted.github.io/notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://averted.github.io/notes/dev/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://averted.github.io/notes/dev/git/</guid>
      <description>Jan 12, 2014
 Restore Version #  Restore a version of a file to the one before commit h0a0s0h (~1 for 1 above version):
git checkout h0a0s0h~1 -- file1/to/restore file2/to/restore Checkout from specific branch #  Example - if your current branch is feature/123, and you&amp;rsquo;re rebasing it on top of master:
git checkout feature/123 git rebase master and run into conflicts on some file (src/some/file.js), you can revert this file to master&amp;rsquo;s version with:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://averted.github.io/notes/dev/vim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://averted.github.io/notes/dev/vim/</guid>
      <description>Buffers #  Navigation #  Navigate through buffers:
:next | :n | ]] :prev | :p | [[ Open all files returned from grep #  vim $(grep -lri &#39;pattern&#39; .) Search and replace multiple files #  Open multiple files into buffers:
vim ./*.js run:
:bufdo %s/pattern/replace/ge [| update] update flag is optional if you have &amp;lsquo;set hidden&amp;rsquo; vim flag enabled.
The same can be accomplished with arglist without loading files into buffers.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://averted.github.io/notes/js/classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://averted.github.io/notes/js/classes/</guid>
      <description>Classes #  Overview #   Class declarations, unlike functions, are not hoisted All methods are nonenumerable Calling class constructor without new throws an error (new.target always exists)  Classes as First-Class Citizens #  A first-class citizen is a value that can be passed into a function, returned from a function, and assigned to a variable. Every JS Function is a first-class citizen, and Classes are as well (can be passed around as arguments inside a fn).</description>
    </item>
    
    <item>
      <title></title>
      <link>https://averted.github.io/notes/js/dynamic-imports/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://averted.github.io/notes/js/dynamic-imports/</guid>
      <description>Dynamic Imports #  The import() expression #  The import(module) expression loads the module and returns a promise that resolves into a module object that contains all its exports. It can be called from any place in the code.
We can use it dynamically in any place of the code, for instance:
let modulePath = prompt(&amp;#34;Which module to load?&amp;#34;); import(modulePath) .then(obj =&amp;gt; &amp;lt;module object&amp;gt;) .catch(err =&amp;gt; &amp;lt;loading error, e.g. if no such module&amp;gt;) Or, we could use let module = await import(modulePath) if inside an async function.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://averted.github.io/notes/shell/files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://averted.github.io/notes/shell/files/</guid>
      <description>August 1, 2018
 Chmod #  Default permission:
chmod 755 # DIR -rwxr-xr-x chmod 644 # FILE -rw-r--r-- Change all directories to 755:
find . -type d -exec chmod 755 {} \; Change all files to 644 under current directory:
find . -type f -exec chmod 644 {} \; Rename Multiple #  for i in *.js; do mv &amp;quot;$i&amp;quot; &amp;quot;./${i/pattern/replace}&amp;quot;; done Example:
Rename list of files from: ic-one.svg -&amp;gt; one.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://averted.github.io/notes/shell/networking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://averted.github.io/notes/shell/networking/</guid>
      <description>December 12, 2020
 WiFi #  Turn off IPv6 on Mac OS:
networksetup -setv6off Wi-Fi </description>
    </item>
    
    <item>
      <title></title>
      <link>https://averted.github.io/notes/tc39/es2016/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://averted.github.io/notes/tc39/es2016/</guid>
      <description>ES2016 #  Array.prototype.includes() #  Determines if a given element is included in the specified array. String.prototype.contains() was also deprecated and String.prototype.includes() was added to determine if a given string in included in another string.
Exponentiation operator(** and **=) #  a**b is shorthand notation for Math.pow(a,b), and a **= b is shorthand for a = a**b</description>
    </item>
    
    <item>
      <title></title>
      <link>https://averted.github.io/notes/tc39/es2017/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://averted.github.io/notes/tc39/es2017/</guid>
      <description>ES2017 #  Object.values / Object.entries #  Retrieves an array of values / arrays of key-value pairs, respectively.
Trailing commas in function parameter lists and calls #  Both (a) =&amp;gt; {}and (a,) =&amp;gt; {} are valid function definitions, and both foo(a) and foo(a,) are valid function calls.
Async functions #  async/await was introduced to JavaScript
Object.getOwnPropertyDescriptors() #  Returns the property descriptors of all own properties of an object.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://averted.github.io/notes/tc39/es2018/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://averted.github.io/notes/tc39/es2018/</guid>
      <description>ES2018 #  Promise.prototype.finally #  Finally was introduced to register a callback function that runs when a promise is settled (either fulfilled or rejected)
Rest and spread operators(&amp;hellip;) #  Rest operator collects values in an array. The spread operator spreads the values in an iterator.
Improvements on Regular Expressions #  RegExp Unicode Property Escapes, RegExp Lookbehind Assertions, s(dotAll) flag for regular expressions, RegExp named capture groups</description>
    </item>
    
    <item>
      <title></title>
      <link>https://averted.github.io/notes/tc39/es2019/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://averted.github.io/notes/tc39/es2019/</guid>
      <description>ES2019 #  Array.prototype.flat() #  Flattens nested arrays up to a provided depth. Default depth is 1.
Array.prototype.flatMap() #  Flattens and maps a given array subsequently. Flattening depth is 1.
Object.fromEntries() #  Builds an object from given key-value pairs.
String.prototype.trimStart() #  Trims the start of a given string.
String.prototype.trimEnd() #  Trims the end of a given string.
Symbol.prototype.description #  Read-only and optional string description for the Symbol objects.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://averted.github.io/notes/tc39/es2020/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://averted.github.io/notes/tc39/es2020/</guid>
      <description>ES2020 #  String.prototype.matchAll() #  Returns all matches for a global regex.
Dynamic Imports #  Before this, we could only use static imports, which only accepted strings for the module path. With dynamic imports, we got to conditionally import modules by using promises.
BigInt #  A new primitive data type that represents larger numbers.
Promise.allSettled() #  Returns when all given promises are settled (rejected or fulfilled, doesn&amp;rsquo;t matter).</description>
    </item>
    
    <item>
      <title></title>
      <link>https://averted.github.io/notes/tc39/es2021/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://averted.github.io/notes/tc39/es2021/</guid>
      <description>ES2021 #  String.prototype.replaceAll() #  Replaces all the occurrences of a given string with another.
Promise.any() #  Resolves if any of the given promises are resolved.
WeakRefs and Finalizers #  This is a class that helps you create weak references to objects, so they can be garbage collected. A FinalizationRegistryobject lets you register a callback that will allow you to invoke when the object is garbage collected.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://averted.github.io/notes/tc39/es2022/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://averted.github.io/notes/tc39/es2022/</guid>
      <description>ES2022 #  Class Public Instance Fields &amp;amp; Private Instance Fields #  Since ES2015, we could define fields by simply setting them up in our constructors. As a convention, fields that were not supposed to be accessed outside of the class methods were preceded by an underscore, but this did not stop any consumer of this class from accessing them anyway.
class ColorButton extends HTMLElement { constructor() { this.color = &amp;#34;red&amp;#34; this.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://averted.github.io/notes/ts/all/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://averted.github.io/notes/ts/all/</guid>
      <description>TypeScript #  Index Signature #  The [key: T]: U is called an index signature, and is the way you tell TS that an object might contain more keys.
let a: { b: number c?: string [key: string]: boolean } Function overloading #  type SomeFunction = { (from: Date, destination: string): Reservation (from: Date, to: Date, destination: string): Reservation } let reserve: SomeFunction = ( from: Date, toOrDestination: Date | string, destination?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://averted.github.io/notes/ts/generics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://averted.github.io/notes/ts/generics/</guid>
      <description>Polymorphism (Generics) #  Intro #  type Filter = { &amp;lt;T&amp;gt;(array: T[], fn: (item: T) =&amp;gt; boolean): T[] } let filter: Filter = (arr, f) =&amp;gt; { ... } // T is bound to number filter([1,2,3], (item) =&amp;gt; item &amp;gt; 2) The place where you declare a generic type dictates when TS will bind a concrete type to your generic. Because we declared as part of call signature, TS will bind a concrete type to T when we actually call filter.</description>
    </item>
    
    <item>
      <title>DOM</title>
      <link>https://averted.github.io/notes/dev/dom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://averted.github.io/notes/dev/dom/</guid>
      <description>Query Params #  Extract query string params (replace qs?) #  Assuming current URL is: ?post=1234&amp;amp;action=edit
var urlParams = new URLSearchParams(window.location.search); console.log(urlParams.has(&amp;#39;post&amp;#39;)); // true console.log(urlParams.get(&amp;#39;action&amp;#39;)); // &amp;#34;edit&amp;#34; console.log(urlParams.getAll(&amp;#39;action&amp;#39;)); // [&amp;#34;edit&amp;#34;] console.log(urlParams.toString()); // &amp;#34;?post=1234&amp;amp;action=edit&amp;#34; console.log(urlParams.append(&amp;#39;active&amp;#39;, &amp;#39;1&amp;#39;)); // &amp;#34;?post=1234&amp;amp;action=edit&amp;amp;active=1&amp;#34; </description>
    </item>
    
    <item>
      <title>Iterators / Generators</title>
      <link>https://averted.github.io/notes/js/iterators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://averted.github.io/notes/js/iterators/</guid>
      <description>Iterators &amp;amp; Generators #  Iterators #  Iterators are objects with a specific interface designed for iteration. All iterator objects have a next() method that returns a result object. The result object has two proerties: value, which is the next value, and done, which is a Boolean that&amp;rsquo;s true when there are no more values to return. The iterator keeps an internal pointer to a location within a collection of values, and with each call to the next() method it returns the next appropriate value.</description>
    </item>
    
    <item>
      <title>OSX</title>
      <link>https://averted.github.io/notes/dev/osx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://averted.github.io/notes/dev/osx/</guid>
      <description>TN2450 (Remapping Keys) #  https://developer.apple.com/library/archive/technotes/tn2450/_index.html</description>
    </item>
    
    <item>
      <title>Postgres</title>
      <link>https://averted.github.io/notes/shell/postgres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://averted.github.io/notes/shell/postgres/</guid>
      <description>December 12, 2018
 Connect #  psql -hlocalhost -Uusername -W -ddatabasename Dump #  pg_dump -hlocalhost -Upostgres dbname &amp;gt; ~/dump.sql </description>
    </item>
    
  </channel>
</rss>
