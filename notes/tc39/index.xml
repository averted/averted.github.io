<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TC39 on Notes</title>
    <link>https://averted.github.io/notes/tc39/</link>
    <description>Recent content in TC39 on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://averted.github.io/notes/tc39/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://averted.github.io/notes/tc39/es2016/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://averted.github.io/notes/tc39/es2016/</guid>
      <description>ES2016 #  Array.prototype.includes() #  Determines if a given element is included in the specified array. String.prototype.contains() was also deprecated and String.prototype.includes() was added to determine if a given string in included in another string.
Exponentiation operator(** and **=) #  a**b is shorthand notation for Math.pow(a,b), and a **= b is shorthand for a = a**b</description>
    </item>
    
    <item>
      <title></title>
      <link>https://averted.github.io/notes/tc39/es2017/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://averted.github.io/notes/tc39/es2017/</guid>
      <description>ES2017 #  Object.values / Object.entries #  Retrieves an array of values / arrays of key-value pairs, respectively.
Trailing commas in function parameter lists and calls #  Both (a) =&amp;gt; {}and (a,) =&amp;gt; {} are valid function definitions, and both foo(a) and foo(a,) are valid function calls.
Async functions #  async/await was introduced to JavaScript
Object.getOwnPropertyDescriptors() #  Returns the property descriptors of all own properties of an object.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://averted.github.io/notes/tc39/es2018/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://averted.github.io/notes/tc39/es2018/</guid>
      <description>ES2018 #  Promise.prototype.finally #  Finally was introduced to register a callback function that runs when a promise is settled (either fulfilled or rejected)
Rest and spread operators(&amp;hellip;) #  Rest operator collects values in an array. The spread operator spreads the values in an iterator.
Improvements on Regular Expressions #  RegExp Unicode Property Escapes, RegExp Lookbehind Assertions, s(dotAll) flag for regular expressions, RegExp named capture groups</description>
    </item>
    
    <item>
      <title></title>
      <link>https://averted.github.io/notes/tc39/es2019/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://averted.github.io/notes/tc39/es2019/</guid>
      <description>ES2019 #  Array.prototype.flat() #  Flattens nested arrays up to a provided depth. Default depth is 1.
Array.prototype.flatMap() #  Flattens and maps a given array subsequently. Flattening depth is 1.
Object.fromEntries() #  Builds an object from given key-value pairs.
String.prototype.trimStart() #  Trims the start of a given string.
String.prototype.trimEnd() #  Trims the end of a given string.
Symbol.prototype.description #  Read-only and optional string description for the Symbol objects.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://averted.github.io/notes/tc39/es2020/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://averted.github.io/notes/tc39/es2020/</guid>
      <description>ES2020 #  String.prototype.matchAll() #  Returns all matches for a global regex.
Dynamic Imports #  Before this, we could only use static imports, which only accepted strings for the module path. With dynamic imports, we got to conditionally import modules by using promises.
BigInt #  A new primitive data type that represents larger numbers.
Promise.allSettled() #  Returns when all given promises are settled (rejected or fulfilled, doesn&amp;rsquo;t matter).</description>
    </item>
    
    <item>
      <title></title>
      <link>https://averted.github.io/notes/tc39/es2021/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://averted.github.io/notes/tc39/es2021/</guid>
      <description>ES2021 #  String.prototype.replaceAll() #  Replaces all the occurrences of a given string with another.
Promise.any() #  Resolves if any of the given promises are resolved.
WeakRefs and Finalizers #  This is a class that helps you create weak references to objects, so they can be garbage collected. A FinalizationRegistryobject lets you register a callback that will allow you to invoke when the object is garbage collected.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://averted.github.io/notes/tc39/es2022/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://averted.github.io/notes/tc39/es2022/</guid>
      <description>ES2022 #  Class Public Instance Fields &amp;amp; Private Instance Fields #  Since ES2015, we could define fields by simply setting them up in our constructors. As a convention, fields that were not supposed to be accessed outside of the class methods were preceded by an underscore, but this did not stop any consumer of this class from accessing them anyway.
class ColorButton extends HTMLElement { constructor() { this.color = &amp;#34;red&amp;#34; this.</description>
    </item>
    
  </channel>
</rss>
